global
#    log syslog:514 local0

		#chroot /var/lib/haproxy
    #user haproxy
    #group haproxy
    pidfile /var/run/haproxy.pid

    # Default SSL material locations
    ca-base /usr/local/etc/ssl/certs
    crt-base /usr/local/etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
#    ssl-default-bind-options   no-sslv3 no-tls-tickets force-tlsv12
 #   ssl-default-bind-ciphers   ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

    spread-checks 4
    tune.maxrewrite 1024
    tune.ssl.default-dh-param 2048

defaults
		log global
		option httplog

    mode    http
    balance roundrobin

    option  redispatch

		# seems to be default 
  	option  http-server-close
		
		# read this https://www.haproxy.com/blog/websockets-load-balancing-with-haproxy/
		# basically there is zero magic required, but increase the tunnel timeout
		timeout tunnel 30m

    maxconn 5000
    timeout connect 5s
    timeout client  20s
    timeout server  20s
    timeout queue   30s
    timeout http-request 5s
    timeout http-keep-alive 15s

listen stats
    bind *:8404
    stats enable
    stats uri /
    stats refresh 5s 

frontend www-http
#	  option logasap
#		option httplog	
#		log syslog:514 len 65335 local0 debug debug

		capture request header Host len 25

		log-format "%ci %r %hr => %b %HP => %ST"

		bind 0.0.0.0:80
		#bind 0.0.0.0:443 ssl crt /etc/letsencrypt/var/live

		# for debugging purposes 
		http-response add-header X-Serving-Backend %b
		#reqadd X-Forwarded-Proto:\ http

		## redirect scheme https code 301 if !{ ssl_fc } !internal_call

		default_backend requestbin-backend

		acl url_certbot path_beg /.well-known/acme-challenge

		use_backend certbot-backend if url_certbot
		
backend requestbin-backend
		server requestbin-server requestbin:80 check		

backend certbot-backend
		server certbot-server nginx:80 check

